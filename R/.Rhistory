## with row/column indices, correlation, and p-value.
## See StackOverflow question: http://goo.gl/fCUcQ
flattenSquareMatrix <- function(m) {
if( (class(m) != "matrix") | (nrow(m) != ncol(m))) stop("Must be a square matrix.")
if(!identical(rownames(m), colnames(m))) stop("Row and column names must be equal.")
ut <- upper.tri(m)
data.frame(i = rownames(m)[row(m)[ut]],
j = rownames(m)[col(m)[ut]],
cor=t(m)[ut],
p=m[ut])
}
x <- cor.prob(adultsTrsf)
head(x)
library(caret)
remove(list=ls9)
remove(list=ls())
library(caret)
remove(list=ls())
names(getModelInfo())
names(getModelInfo())
library(RCurl)
urlfile <-'https://raw.githubusercontent.com/hadley/fueleconomy/master/data-raw/vehicles.csv'
?getURL
x <- getURL(urlfile, ssl.verifypeer = FALSE)
class(x)
head(x)
vehicles <- read.csv(textConnection(x))
head(vehicles)
dim(vehicles)
?repeat
?repeat
remove(list=ls())
titanicDF <- read.csv('http://math.ucdenver.edu/RTutorial/titanic.txt',sep='\t')
head(titanicDF)
titanicDF$Title <- ifelse(grepl('Mr ',titanicDF$Name),'Mr',ifelse(grepl('Mrs ',titanicDF$Name),'Mrs',ifelse(grepl('Miss',titanicDF$Name),'Miss','Nothing')))
titanicDF$Title <- as.factor(titanicDF$Title)
titanicDF$Age[is.na(titanicDF$Age)] <- median(titanicDF$Age, na.rm=T)
titanicDF <- titanicDF[c('PClass', 'Age',    'Sex',   'Title', 'Survived')]
require(caret)
titanicDummy <- dummyVars("~.",data=titanicDF, fullRank=F)
titanicDF <- as.data.frame(predict(titanicDummy,titanicDF))
head(titanicDF)
summary(titanicDF)
df_survived_1 <- subset(titanicDF, Survived==1)
df_survived_0 <- subset(titanicDF, Survived==0)
summary(df_survived_1$Sex.female)
summary(df_survived_0$Sex.female)
class(summary(df_survived_0$Sex.female))
Sex.Female_0 <- (summary(df_survived_0$Sex.female))
Sex.Female_0
class(Sex.Female_0)
Sex.Female_0 <- summary(df_survived_0$Sex.female)
class(Sex.Female_0)
Sex.Female_0
Sex.Female_0 <- c(Sex.Female_0[1:6])
Sex.Female_0
class(Sex.Female_0)
Sex.Female_0 <- as.numeric(summary(df_survived_0$Sex.female))
Sex.Female_0
Sex.Female_0 <- summary(df_survived_0$Sex.female)
Sex.Female_0 <- c(Sex.Female_0[1:6])
Sex.Female_1 <- (summary(df_survived_1$Sex.female))
Sex.Female_1 <- c(Sex.Female_1[1:6])
stats <- data.frame('ind'=c(1:6),
'Sex.Female_1'=Sex.Female_1,
'Sex.Female_0'=Sex.Female_0)
stats
Sex.Female_1
str(Sex.Female_1)
class(Sex.Female_1)
names(Sex.Female_1)
Sex.Female_1 <- summary(df_survived_1$Sex.female)
Sex.Female_1 <- c(Sex.Female_1)
Sex.Female_1
class(Sex.Female_1)
Sex.Female_0 <- c(Sex.Female_0)
stats <- data.frame('ind'=c(1:6),
'Sex.Female_1'=Sex.Female_1,
'Sex.Female_0'=Sex.Female_0)
stats
require(ggplot2)
p <- ggplot(data=stats, aes(ind)) +
geom_line(aes(y = Sex.Female_1, colour = "Sex.Female_1")) +
geom_line(aes(y = Sex.Female_0, colour = "Sex.Female_0")) +
scale_x_discrete(breaks = 1:6,
labels=c("min","1q","median","mean","3q","max"))
p
rm(list = ls())
getwd()
getwd()
setwd('/Users/hawooksong/Desktop/shinyDE/R')
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
length(unique(mtcars$mpg))
length(unique(mtcars$mpg))
runApp()
c(1, NULL, 2, 3)
NULL %in% c(1, NULL, 2, 3)
c(1, NULL, 2, 3)
c(1, NULL, 2, 3, 'a')
NULL %in% c(1, NULL, 2, 3, 'a')
NULL %in% c(1, NULL, 2, 3, 'a')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(mtcars)
ggplot(diamonds, aes(x=carat, y=cut)) +
geom_point()
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- as.factor(mtcars$am)
runApp()
runApp()
ggplot(mtcars) +
geom_point(aes(x=mpg, y=cyl)) +
ylim(c("6", "4", "8"))
runApp()
runApp()
runApp()
str(mtcars)
str(diamonds)
head(diamonds$cut)
class(diamonds$cut)
as.character(dataset[['cyl']])
as.character(mtcars[['cyl']])
unique(as.character(mtcars[['cyl']]))
head(mtcars[['cyl']])
attr(mtcars[['cyl']])
levels(mtcars[['cyl']])
levels(diamonds[['cut']])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth=1)
ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth=1) +
xlim(c(-0.8, 6.01))
ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth=1) +
xlim(c(-0.8, 6.01))
try(
ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth=1) +
xlim(c(-0.8, 6.01))
)
tryCatch(
ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth=1) +
xlim(c(-0.8, 6.01))
)
try(
ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth=1) +
xlim(c(-0.8, 6.01)),
silent = TRUE
)
try(
expr =
ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth=1) +
xlim(c(-0.8, 6.01)),
silent = TRUE
)
tryCatch(
ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth=1) +
xlim(c(-0.8, 6.01)),
error = function(e) NULL
)
tryCatch(
ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth=1) +
xlim(c(-0.8, 6.01)),
error = function(e) e
)
tryCatch(
ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth=1) +
xlim(c(-0.8, 6.01))
)
try(
expr =
ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth=1) +
xlim(c(-0.8, 6.01)),
silent = FALSE
)
try(
ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth=1) +
xlim(c(-0.8, 6.01)),
silent = TRUE
)
try(
'a' + 'b'
)
a <- try(
'a' + 'b'
)
a
class(a)
a <- try(
'a' + 'b',
silent=TRUE
)
a
class(a)
try(
ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth=1) +
xlim(c(-0.8, 6.01)),
silent = TRUE
)
p <-  ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth=1)
try(
p + xlim(c(-0.8, 6.01)),
silent = TRUE
)
rm(p)
rm(a)
range(mtcars[[x]])
range(mtcars[['mpg']])
range(mtcars[['mpg']], na.rm=TRUE)
runApp()
runApp()
runApp()
plot(c(-1, 6))
plot(c(-1, 6), c(1, 1))
plot(c(-1, 6), c(1, 1), col='black')
plot(c(-1, 6), c(1, 1), col='black', pch=19)
plot(c(9, 34), c(1, 1), col='red', pch=19)
plot(c(-1, 6), c(1, 1), col='black', pch=19)
plot(c(9, 34), c(2, 2), col='red', pch=19)
plot(c(-1, 6, 9, 34), c(1, 1, 2, 2), col=c('black', 'red', 'black', 'red', pch=19)
plot(c(-1, 6, 9, 34), c(1, 1, 2, 2), col=c('black', 'red', 'black', 'red', pch=19)
plot(c(-1, 6, 9, 34), c(1, 1, 2, 2), col=c('black', 'red', 'black', 'red'), pch=19)
plot(c(-1, 6, 9, 34), c(1, 1, 1, 1), col=c('black', 'red', 'black', 'red'), pch=19)
range1 <- c(0, 10)
range2 <- c(15, 20)
range1 <- c(0, 10)
range2 <- c(15, 20)
checkTwoRangesOverlap <- function(range1, range2) {
lowerRange1 <- range1[1]
upperRange1 <- range1[2]
lowerRange2 <- range2[1]
upperRange2 <- range2[2]
return(upperRange1 >= lowerRange2 & lowerRange1 <= upperRange2)
}
range1 <- c(0, 10)
range2 <- c(15, 20)
checkTwoRangesOverlap(range1, range2)
range1 <- c(0, 10)
range2 <- c(10, 20)
checkTwoRangesOverlap(range1, range2)
range1 <- c(0, 10)
range2 <- c(5, 15)
checkTwoRangesOverlap(range1, range2)
range1 <- c(0, 10)
range2 <- c(0, 10)
checkTwoRangesOverlap(range1, range2)
range1 <- c(0, 10)
range2 <- c(-5, 5)
checkTwoRangesOverlap(range1, range2)
range1 <- c(0, 10)
range2 <- c(-10, 0)
checkTwoRangesOverlap(range1, range2)
range1 <- c(0, 10)
range2 <- c(-15, -5)
checkTwoRangesOverlap(range1, range2)
runApp()
runApp()
runApp()
runApp()
str(mtcars)
p <- ggplot(mtcars) +
geom_point(aes(x=mpg, y=cyl))
p
levels(mtcars$cyl)
ylim <- c('4', '6', '8')
p + ylim(ylim)
ylim <- c(4, 10)
p + ylim(ylim)
z <- try(
p + ylim(ylim)
)
z
?try
z <- try(
p + ylim(ylim),
silent=TRUE
)
class(z)
z
class(p)
z
class(z)
tryCatch(
p <- p + xlim(xlim) + ylim(ylim),
error = function(e) e,
finally = return()
)
tryCatch(
p <- p + xlim(xlim) + ylim(ylim),
error = function(e) e,
finally = return(NULL)
)
tryCatch(
p <- p + xlim(xlim) + ylim(ylim),
error = function(e) e,
finally = print('hi')
)
tryCatch(
p <- p + xlim(xlim) + ylim(ylim),
error = function(e) e,
finally = NULL
)
z <- tryCatch(
p <- p + xlim(xlim) + ylim(ylim),
error = function(e) e,
finally = NULL
)
z
class(z  )
is.numeric(c(1, 2))
class(mtcars$vs)
class(c(1, 2))
c('1', '2')
class(c('1', '2'))
class(mtcars$cyl)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(list = ls())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dataset <- diamonds
var <- 'carat'
lim <- c(-0.8, 6.01)
varType <- class(dataset[[var]])
limType <- class(lim)
var <- 'cyl'
lim <- c(-0.8, 6.01)
varType <- class(dataset[[var]])
limType <- class(lim)
rm(list = ls())
runApp()
runApp()
c(1, 2) %in% c(2, 3)
runApp()
runApp()
c("ordered", "factor") %in% c('factor', 'character')
any(c("ordered", "factor") %in% c('factor', 'character'))
rm(list = ls())
runApp()
runApp()
dataset <- diamonds
var <- 'cut'
lim <- c(-0.8, 6.01)
checkVarAndLimCompatible(dataset, var, lim)
checkVarAndLimCompatible <- function(dataset, var, lim) {
varType <- class(dataset[[var]])
limType <- class(lim)
if (any(varType %in% 'numeric')) {
if (limType=='numeric') {
return(TRUE)
}
} else if (any(varType %in% c('factor', 'character'))) {
if (limType=='character') {
return(TRUE)
}
}
return(FALSE)
}
checkVarAndLimCompatible(dataset, var, lim)
rm(list = ls())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(NULL)
runApp()
dataset <- diamonds
var <- 'cut'
lim <- c(1, 10)
varType <- c('ordered', 'factor')
limType <- 'numeric'
any(varType %in% 'numeric')
any(varType %in% c('factor', 'character'))
if (any(varType %in% 'numeric')) {
if (limType=='numeric') {
return(TRUE)
}
} else if (any(varType %in% c('factor', 'character'))) {
if (limType=='character') {
return(TRUE)
}
}
return(FALSE)
return(FALSE)
rm(list = ls())
runApp()
runApp()
runApp()
rm(list = ls())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
setwd('/Users/hawooksong/Desktop/shinyDE2')
runApp()
install.packages('shinyBS')
runApp()
getwd()
setwd('/Users/hawooksong/Desktop/shinyDE')
runApp()
setwd('/Users/hawooksong/Desktop/shinyDE/R')
runApp()
setwd('/Users/hawooksong/Desktop/shinyDE2')
runApp()
runApp()
getwd()
setwd('/Users/hawooksong/Desktop/shinyDE2/R')
runApp()
setwd('/Users/hawooksong/Desktop/shinyDE/R')
runApp()
runApp()
runApp()
runApp()
runApp()
?bsButton
?updateButton
runApp()
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
getwd()
