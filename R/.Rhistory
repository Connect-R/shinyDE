ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth=1) +
xlim(c(-0.8, 6.01))
)
try(
expr =
ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth=1) +
xlim(c(-0.8, 6.01)),
silent = FALSE
)
try(
ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth=1) +
xlim(c(-0.8, 6.01)),
silent = TRUE
)
try(
'a' + 'b'
)
a <- try(
'a' + 'b'
)
a
class(a)
a <- try(
'a' + 'b',
silent=TRUE
)
a
class(a)
try(
ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth=1) +
xlim(c(-0.8, 6.01)),
silent = TRUE
)
p <-  ggplot(mtcars, aes(x=mpg)) +
geom_histogram(binwidth=1)
try(
p + xlim(c(-0.8, 6.01)),
silent = TRUE
)
rm(p)
rm(a)
range(mtcars[[x]])
range(mtcars[['mpg']])
range(mtcars[['mpg']], na.rm=TRUE)
runApp()
runApp()
runApp()
plot(c(-1, 6))
plot(c(-1, 6), c(1, 1))
plot(c(-1, 6), c(1, 1), col='black')
plot(c(-1, 6), c(1, 1), col='black', pch=19)
plot(c(9, 34), c(1, 1), col='red', pch=19)
plot(c(-1, 6), c(1, 1), col='black', pch=19)
plot(c(9, 34), c(2, 2), col='red', pch=19)
plot(c(-1, 6, 9, 34), c(1, 1, 2, 2), col=c('black', 'red', 'black', 'red', pch=19)
plot(c(-1, 6, 9, 34), c(1, 1, 2, 2), col=c('black', 'red', 'black', 'red', pch=19)
plot(c(-1, 6, 9, 34), c(1, 1, 2, 2), col=c('black', 'red', 'black', 'red'), pch=19)
plot(c(-1, 6, 9, 34), c(1, 1, 1, 1), col=c('black', 'red', 'black', 'red'), pch=19)
range1 <- c(0, 10)
range2 <- c(15, 20)
range1 <- c(0, 10)
range2 <- c(15, 20)
checkTwoRangesOverlap <- function(range1, range2) {
lowerRange1 <- range1[1]
upperRange1 <- range1[2]
lowerRange2 <- range2[1]
upperRange2 <- range2[2]
return(upperRange1 >= lowerRange2 & lowerRange1 <= upperRange2)
}
range1 <- c(0, 10)
range2 <- c(15, 20)
checkTwoRangesOverlap(range1, range2)
range1 <- c(0, 10)
range2 <- c(10, 20)
checkTwoRangesOverlap(range1, range2)
range1 <- c(0, 10)
range2 <- c(5, 15)
checkTwoRangesOverlap(range1, range2)
range1 <- c(0, 10)
range2 <- c(0, 10)
checkTwoRangesOverlap(range1, range2)
range1 <- c(0, 10)
range2 <- c(-5, 5)
checkTwoRangesOverlap(range1, range2)
range1 <- c(0, 10)
range2 <- c(-10, 0)
checkTwoRangesOverlap(range1, range2)
range1 <- c(0, 10)
range2 <- c(-15, -5)
checkTwoRangesOverlap(range1, range2)
runApp()
runApp()
runApp()
runApp()
str(mtcars)
p <- ggplot(mtcars) +
geom_point(aes(x=mpg, y=cyl))
p
levels(mtcars$cyl)
ylim <- c('4', '6', '8')
p + ylim(ylim)
ylim <- c(4, 10)
p + ylim(ylim)
z <- try(
p + ylim(ylim)
)
z
?try
z <- try(
p + ylim(ylim),
silent=TRUE
)
class(z)
z
class(p)
z
class(z)
tryCatch(
p <- p + xlim(xlim) + ylim(ylim),
error = function(e) e,
finally = return()
)
tryCatch(
p <- p + xlim(xlim) + ylim(ylim),
error = function(e) e,
finally = return(NULL)
)
tryCatch(
p <- p + xlim(xlim) + ylim(ylim),
error = function(e) e,
finally = print('hi')
)
tryCatch(
p <- p + xlim(xlim) + ylim(ylim),
error = function(e) e,
finally = NULL
)
z <- tryCatch(
p <- p + xlim(xlim) + ylim(ylim),
error = function(e) e,
finally = NULL
)
z
class(z  )
is.numeric(c(1, 2))
class(mtcars$vs)
class(c(1, 2))
c('1', '2')
class(c('1', '2'))
class(mtcars$cyl)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(list = ls())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dataset <- diamonds
var <- 'carat'
lim <- c(-0.8, 6.01)
varType <- class(dataset[[var]])
limType <- class(lim)
var <- 'cyl'
lim <- c(-0.8, 6.01)
varType <- class(dataset[[var]])
limType <- class(lim)
rm(list = ls())
runApp()
runApp()
c(1, 2) %in% c(2, 3)
runApp()
runApp()
c("ordered", "factor") %in% c('factor', 'character')
any(c("ordered", "factor") %in% c('factor', 'character'))
rm(list = ls())
runApp()
runApp()
dataset <- diamonds
var <- 'cut'
lim <- c(-0.8, 6.01)
checkVarAndLimCompatible(dataset, var, lim)
checkVarAndLimCompatible <- function(dataset, var, lim) {
varType <- class(dataset[[var]])
limType <- class(lim)
if (any(varType %in% 'numeric')) {
if (limType=='numeric') {
return(TRUE)
}
} else if (any(varType %in% c('factor', 'character'))) {
if (limType=='character') {
return(TRUE)
}
}
return(FALSE)
}
checkVarAndLimCompatible(dataset, var, lim)
rm(list = ls())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(NULL)
runApp()
dataset <- diamonds
var <- 'cut'
lim <- c(1, 10)
varType <- c('ordered', 'factor')
limType <- 'numeric'
any(varType %in% 'numeric')
any(varType %in% c('factor', 'character'))
if (any(varType %in% 'numeric')) {
if (limType=='numeric') {
return(TRUE)
}
} else if (any(varType %in% c('factor', 'character'))) {
if (limType=='character') {
return(TRUE)
}
}
return(FALSE)
return(FALSE)
rm(list = ls())
runApp()
runApp()
runApp()
rm(list = ls())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
setwd('/Users/hawooksong/Desktop/shinyDE2')
runApp()
install.packages('shinyBS')
runApp()
getwd()
setwd('/Users/hawooksong/Desktop/shinyDE')
runApp()
setwd('/Users/hawooksong/Desktop/shinyDE/R')
runApp()
setwd('/Users/hawooksong/Desktop/shinyDE2')
runApp()
runApp()
getwd()
setwd('/Users/hawooksong/Desktop/shinyDE2/R')
runApp()
setwd('/Users/hawooksong/Desktop/shinyDE/R')
runApp()
runApp()
runApp()
runApp()
runApp()
?bsButton
?updateButton
runApp()
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
getwd()
runApp()
library(shiny)
getwd()
runApp()
visualToolkit()
#' Launch VisualToolkit in the default browser
#'
#' @details See \url{http://www.google.com} for documentation and tutorials
#'
#' @examples
#' if (interactive()) {
#'   visualToolkit()
#' }
#' @export
visualToolkit <- function() {
addResourcePath("imgs", system.file("base/www/imgs/", package="radiant"))
addResourcePath("figures", system.file("base/tools/help/figures/", package="radiant"))
runApp(system.file(app[1], package='radiant'))
}
#' Create a launcher for Windows (.bat)
#'
#' @details On Windows a file named `radiant.bat` will be put on the desktop. Double-click the file to launch the specified Radiant app
#'
#' @param app App to run when the desktop icon is double-clicked ("marketing", "quant", or "base"). Default is "marketing"
#'
#' @examples
#' if (interactive()) {
#'   if(Sys.info()["sysname"] != "Windows") {
#'     win_launcher()
#'     fn <- paste0(Sys.getenv("USERPROFILE") ,"/Desktop/radiant.bat")
#'     if(!file.exists(fn))
#'        stop("Windows launcher not created")
#'     else
#'       unlink(fn)
#'   }
#' }
#'
#' @export
win_launcher <- function(app = c("marketing", "quant", "base")) {
if(Sys.info()["sysname"] != "Windows")
return("This function is for Windows only. For Mac use the mac_launcher() function")
local_dir <- Sys.getenv("R_LIBS_USER")
if(!file.exists(local_dir)) dir.create(local_dir, recursive = TRUE)
filepath <- normalizePath(paste0(Sys.getenv("USERPROFILE") ,"/Desktop/"), winslash='/')
launch_string <- paste0(Sys.which('R'), " -e \"if(!require(radiant)) { options(repos = c(XRAN = 'http://vnijs.github.io/radiant_miniCRAN/')); install.packages('radiant'); }; require(radiant); shiny::runApp(system.file(\'", app[1], "\', package='radiant'), port = 4444, launch.browser = TRUE)\"")
cat(launch_string,file=paste0(filepath,"radiant.bat"),sep="\n")
}
#' Create a launcher for Mac (.command)
#'
#' @details On Mac a file named `radiant.command` will be put on the desktop. Double-click the file to launch the specified Radiant app
#'
#' @param app App to run when the desktop icon is double-clicked ("marketing", "quant", or "base"). Default is "marketing"
#'
#' @examples
#' if (interactive()) {
#'   if(Sys.info()["sysname"] != "Darwin") {
#'     mac_launcher()
#'     fn <- paste0("/Users/",Sys.getenv("USER"),"/Desktop/radiant.command")
#'     if(!file.exists(fn))
#'        stop("Mac launcher not created")
#'     else
#'       unlink(fn)
#'   }
#' }
#'
#' @export
mac_launcher <- function(app = c("marketing", "quant", "base")) {
if(Sys.info()["sysname"] != "Darwin")
return("This function is for Mac only. For windows use the win_launcher() function")
local_dir <- Sys.getenv("R_LIBS_USER")
if(!file.exists(local_dir)) dir.create(local_dir, recursive = TRUE)
filename <- paste0("/Users/",Sys.getenv("USER"),"/Desktop/radiant.command")
launch_string <- paste0("#!/usr/bin/env Rscript\n if(!require(radiant)) {\n options(repos = c(XRAN = 'http://vnijs.github.io/radiant_miniCRAN/'))\n install.packages('radiant')\n }\n\nrequire(radiant)\nshiny::runApp(system.file(\'", app[1], "\', package='radiant'), port = 4444, launch.browser = TRUE)\n")
cat(launch_string,file=filename,sep="\n")
Sys.chmod(filename, mode = "0755")
}
visualToolkit()
install.packages('radiant')
library(radiant)
visualToolkit()
radiant()
install.packages('rattle')
search()
system.file()
?system.file
invisible()
class(invisible())
?filter_
?select
getclass <- function(dat) {
sapply(dat, function(x) class(x)[1]) %>%
sub("ordered","factor", .) %>%
sub("POSIXct","date", .) %>%
sub("POSIXlt","date", .) %>%
sub("Date","date", .) %>%
sub("Period","period", .)
}
getclass(mtcars)
getclass(diamonds)
?sub
sapply(diamonds, function(x) class(x)[1])
sapply(diamonds, function(x) class(x)[2])
sapply(diamonds, function(x) class(x)[1])
sapply(diamonds, function(x) class(x))
'hi' %>% 'bye'
?addResourcePath
Sys.info()
Sys.info()['sysname']
mac_launcher('analytics')
radiant('analytics')
setwd('/User/hawooksong/Desktop/shinyDE3')
setwd('/Users/hawooksong/Desktop/shinyDE3')
runApp()
runApp()
getwd()
setwd('/Users/hawooksong/Desktop/shinyDE')
setwd('/Users/hawooksong/Desktop/shinyDE/R')
library(shiny)
runApp()
rm(list = ls9)
rm(list = ls())
runApp()
runApp()
runApp()
runApp()
?observeEvent
runApp()
?bsButton
library(shinyjs)
runApp()
runApp()
runApp()
runApp()
?observeEvent
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()]
runApp()
runApp()
runApp()
getwd()
runApp()
setwd('/Users/hawooksong/Desktop/shinyDE3')
runApp()
runApp()
getwd()
setwd('/Users/hawooksong/Desktop/shinyDE/R')
runApp()
runApp()
runApp()
setwd('/Users/hawooksong/Desktop/shinyDE3')
if ('hi') {
print('hi')
}
getwd()
setwd('/Users/hawooksong/Desktop/shinyDE')
runApp()
setwd('/Users/hawooksong/Desktop/shinyDE/R')
runApp()
runApp()
runApp()
if (interactive()) {
shiny::shinyApp(
ui = shiny::fluidPage(
useShinyjs(),  # Set up shinyjs
shiny::actionButton("btn", "Click me"),
shiny::textInput("element", "Watch what happens to me")
),
server = function(input, output) {
shiny::observeEvent(input$btn, {
# Change the following line for more examples
toggleState("element")
})
}
)
}
if (interactive()) {
shiny::shinyApp(
ui = shiny::fluidPage(
useShinyjs(),  # Set up shinyjs
shiny::actionButton("btn", "Click me"),
shiny::textInput("element", "Watch what happens to me")
),
server = function(input, output, session) {
shiny::observeEvent(input$btn, {
# Change the following line for more examples
toggleState("element")
})
}
)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
1==1==1
1==1
runApp()
runApp()
runApp()
runApp()
sessionInfo()
update.packages()
y
y
y
y
version()
sessionInfo()
