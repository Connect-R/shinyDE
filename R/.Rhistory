y=x-3
y<-x-3
y
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args()
args(list.files())
args(list.files
args(list.files)
dir()
old.dir <- getwd()
library("swirl", lib.loc="~/R/win-library/3.0")
swirl()
dir.create()
dir.create(testdir)
dir.create('testdir')
setwd('testdir')
file.create(mytest.R)
file.create('mytest.R')
ls()
list.files()
file.exists('mytest.R')
file.info('mytest.R')
file.info('mytest.R')$mode
ffile.rename('mytest.R','mytest2.R')
file.rename('mytest.R','mytest2.R')
file.copy('mytest2.R','mytest3.R')
file.pth('mytest3.R')
file.path('mytest3.R')
file.path('folder1','folder2')
?dir.create
dir.create(file.path('testdir2','testdir3'))
dir.create(file.path('testdir2','testdir3'), recursive=TRUE)
ls()
list.dirs()
unlink("testdir2")
unlink("testdir2", recursive= true)
unlink("testdir2", recursive= TRUE)
setwd(old.dir)
dir.delete(testdir)
lid
ls()
list.dirs()
ls()
list.dirs()
unlink("testdir")
unlink("testdir", recursive=TRUE)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(1,20, by=0.5)
seq(1,10, by=0.5)
seq(0,10, by=0.5)
seq(5,10, length=30)
seq(5,10, length=3)
seq(5,10, length=4)
my_seq <- seq(5,10, length=-3)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_deq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- (0.5,55,-10,6)
num_vect = (0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Jason")
my_name <- c(my_char, "Jason")
my_name
paste(my_name, collapse = " ")
paste("Hello","World", collapse = " ")
paste("Hello","World!", collapse = " ")
paste("Hello","world!", collapse = " ")
paste("Hello","world!", sep = " ")
paste(1:3,c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep="_")
paste(LETTERS, 1:4, sep="-")
x<- c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<- rap(NA,1000)
z<- rep(NA,1000)
z
my_data <- sample(c(y,z))
my_data <- sample(c(y,z),100)
my_date
my_data
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[]
0
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<- c(11,2,NA)
names(vect2)<- c("foo","boo","norf")
names(vect2)<- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- (1:20, nrow=4, ncol=5)
my_matrix2 <- (data=1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(data=1:20, nrow=4, ncol=5)
identical (my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age","weight","bp","rating","test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10,replace=FALSE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),100,prob=c(0.3,0.7))
sample(c(0,1),100,prob=c(0.3,0.7), replace=tRUE)
sample(c(0,1),100,prob=c(0.3,0.7), replace=TRUE)
flips <- sample(c(0,1),100,prob=c(0.3,0.7), replace=TRUE)
flips
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2<-rbinom(1,size=100,prob=0.7)
flips2<-rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
rnorm
?rnorm
rnorm*19
rnorm(1)
rnorm(10)
rnorm(100, sd=25)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5,10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
cm
hist(cm)
data(cars)
?cars
cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot()
plot(y = cars$speed, x = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed, xlab = "speed")
plot(x = cars$dist, y = cars$speed, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", subtitle = "My Plot Subtitle")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch=2)
mtcars
data(mtcars)
?boxplot
boxplot(data = mtcars, mpg ~ cyl)
boxplot(data = mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
DF <- read.table(text="timestamp; x; y
Feb 17, 2013 8:33:24 PM.000; 724; 414
Feb 17, 2013 8:34:24 PM.000; 398; 769
Feb 17, 2013 8:43:27 PM.000; 398; 769
Feb 17, 2013 8:44:15 PM.000; 637; 1083",
header=TRUE,sep=";",stringsAsFactors=FALSE)
DF$timestamp <- as.numeric(strptime(DF$timestamp,
"%b %d, %Y %I:%M:%S %p.000",tz="GMT"))
DF$timestamp <- DF$timestamp-min(DF$timestamp)
DF$ID <- 1
library(googleVis)
M1 <- gvisMotionChart(DF, idvar="ID", timevar="timestamp",xvar="x", yvar="y")
plot(M1)
install.packages("googleVis")
library(googleVis)
M1 <- gvisMotionChart(DF, idvar="ID", timevar="timestamp",xvar="x", yvar="y")
M1 <- gvisMotionChart(DF, idvar="ID", timevar="timestamp",xvar="x", yvar="y")
plot(M1)
DF <- read.table(text="timestamp; x; y
Feb 17, 2013 8:33:24 PM.000; 724; 414
Feb 17, 2013 8:34:24 PM.000; 398; 769
Feb 17, 2013 8:43:27 PM.000; 398; 769
Feb 17, 2013 8:44:15 PM.000; 637; 1083",
header=TRUE,sep=";",stringsAsFactors=FALSE)
DF$timestamp <- as.numeric(strptime(DF$timestamp,
"%b %d, %Y %I:%M:%S %p.000",tz="GMT"))
DF$timestamp <- DF$timestamp-min(DF$timestamp)
DF$ID <- 1
M1 <- gvisMotionChart(DF, idvar="ID", timevar="timestamp",xvar="x", yvar="y")
DF <- read.table(text="timestamp; x; y
Feb 17, 2013 8:33:24 PM.000; 724; 414
Feb 17, 2013 8:34:24 PM.000; 398; 769
Feb 17, 2013 8:43:27 PM.000; 398; 769
Feb 17, 2013 8:44:15 PM.000; 637; 1083",
header=TRUE,sep=";",stringsAsFactors=FALSE)
M1 <- gvisMotionChart(DF, idvar="ID", timevar="timestamp",xvar="x", yvar="y")
plot(M1)
M1 <- gvisMotionChart(DF, idvar="ID", timevar="timestamp",xvar="x", yvar="y")
DF$timestamp <- as.numeric(strptime(DF$timestamp,"%b %d, %Y %I:%M:%S %p.000",tz="GMT"))
M1 <- gvisMotionChart(DF, idvar="ID", timevar="timestamp",xvar="x", yvar="y")
DF$timestamp <- DF$timestamp-min(DF$timestamp)
DF$ID <- 1
library(googleVis)
M1 <- gvisMotionChart(DF, idvar="ID", timevar="timestamp",xvar="x", yvar="y")
plot(M1)
install.packages("rvest")
library(MASS)
library(lattice)
install.packages("MASS")
install.packages("rggobi")
ir <- rbind(iris3[,,1], iris3[,,2], iris3[,,3])
parcoord(log(ir)[, c(1, 2, 3, 4)], col = 1 + (0:149)%/%50)
parallel(~iris[1:4] | Species, iris)
?parallel
demo(lattic)
demo(lattice)
install.packages("iplots")
library(iplots)
library(iplots)
library(iplots)
library("gplots", lib.loc="~/R/win-library/3.2")
library("ggplot2", lib.loc="~/R/win-library/3.2")
library("ggmap", lib.loc="~/R/win-library/3.2")
library(MASS)
library(lattice)
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
library("dplyr", lib.loc="~/R/win-library/3.2")
library(googleVis)
install.packages("googleVis")
library(MASS)
install.packages("RGtk2")
library("RGtk2", lib.loc="~/R/win-library/3.2")
library(MASS)
install.packages("XML")
library(rggobi)
library(rJava)
library(iplots)
library(rJava)
install.packages("arules")
library("arules", lib.loc="~/R/win-library/3.2")
install.packages("rattle")
library("rattle", lib.loc="~/R/win-library/3.2")
rattle()
library("arules", lib.loc="~/R/win-library/3.2")
range1 <- c(0, 10)
shiny::runApp('~/GitHub/shinyDE/R')
#' Launch VisualToolkit in the default browser
#'
#' @details See \url{http://www.google.com} for documentation and tutorials
#'
#' @examples
#' if (interactive()) {
#'   visualToolkit()
#' }
#' @export
visualToolkit <- function() {
runApp(system.file(app[1], package='visualToolkit'))
}
# #' Create a launcher for Windows (.bat)
# #'
# #' @details On Windows a file named `radiant.bat` will be put on the desktop. Double-click the file to launch the specified Radiant app
# #'
# #' @param app App to run when the desktop icon is double-clicked ("marketing", "quant", or "base"). Default is "marketing"
# #'
# #' @examples
# #' if (interactive()) {
# #'   if(Sys.info()["sysname"] != "Windows") {
# #'     win_launcher()
# #'     fn <- paste0(Sys.getenv("USERPROFILE") ,"/Desktop/radiant.bat")
# #'     if(!file.exists(fn))
# #'        stop("Windows launcher not created")
# #'     else
# #'       unlink(fn)
# #'   }
# #' }
# #'
# #' @export
# win_launcher <- function(app = c("marketing", "quant", "base")) {
#
#   if(Sys.info()["sysname"] != "Windows")
#     return("This function is for Windows only. For Mac use the mac_launcher() function")
#
#   local_dir <- Sys.getenv("R_LIBS_USER")
#   if(!file.exists(local_dir)) dir.create(local_dir, recursive = TRUE)
#
#   filepath <- normalizePath(paste0(Sys.getenv("USERPROFILE") ,"/Desktop/"), winslash='/')
#   launch_string <- paste0(Sys.which('R'), " -e \"if(!require(radiant)) { options(repos = c(XRAN = 'http://vnijs.github.io/radiant_miniCRAN/')); install.packages('radiant'); }; require(radiant); shiny::runApp(system.file(\'", app[1], "\', package='radiant'), port = 4444, launch.browser = TRUE)\"")
#   cat(launch_string,file=paste0(filepath,"radiant.bat"),sep="\n")
# }
#
# #' Create a launcher for Mac (.command)
# #'
# #' @details On Mac a file named `radiant.command` will be put on the desktop. Double-click the file to launch the specified Radiant app
# #'
# #' @param app App to run when the desktop icon is double-clicked ("marketing", "quant", or "base"). Default is "marketing"
# #'
# #' @examples
# #' if (interactive()) {
# #'   if(Sys.info()["sysname"] != "Darwin") {
# #'     mac_launcher()
# #'     fn <- paste0("/Users/",Sys.getenv("USER"),"/Desktop/radiant.command")
# #'     if(!file.exists(fn))
# #'        stop("Mac launcher not created")
# #'     else
# #'       unlink(fn)
# #'   }
# #' }
# #'
# #' @export
# mac_launcher <- function(app = c("marketing", "quant", "base")) {
#
#   if(Sys.info()["sysname"] != "Darwin")
#     return("This function is for Mac only. For windows use the win_launcher() function")
#
#   local_dir <- Sys.getenv("R_LIBS_USER")
#   if(!file.exists(local_dir)) dir.create(local_dir, recursive = TRUE)
#
#   filename <- paste0("/Users/",Sys.getenv("USER"),"/Desktop/radiant.command")
#   launch_string <- paste0("#!/usr/bin/env Rscript\n if(!require(radiant)) {\n options(repos = c(XRAN = 'http://vnijs.github.io/radiant_miniCRAN/'))\n install.packages('radiant')\n }\n\nrequire(radiant)\nshiny::runApp(system.file(\'", app[1], "\', package='radiant'), port = 4444, launch.browser = TRUE)\n")
#   cat(launch_string,file=filename,sep="\n")
#   Sys.chmod(filename, mode = "0755")
# }
shiny::runApp('~/GitHub/shinyDE/R')
install.packages("shinyBS")
shiny::runApp('~/GitHub/shinyDE/R')
shiny::runApp('~/GitHub/shinyDE/R')
?radiant()
?radiant
?radiant()
?radiant
setwd("~/GitHub/shinyDE")
opts_knit$set(root.dir = "~/GitHub/shinyDE")
getwd()
shiny::runApp('R')
shiny::runApp()
shiny::runApp()
#' Launch VisualToolkit in the default browser
#'
#' @details See \url{http://www.google.com} for documentation and tutorials
#'
#' @examples
#' if (interactive()) {
#'   visualToolkit()
#' }
#' @export
visualToolkit <- function() {
runApp(system.file(app[1], package='visualToolkit'))
}
# #' Create a launcher for Windows (.bat)
# #'
# #' @details On Windows a file named `radiant.bat` will be put on the desktop. Double-click the file to launch the specified Radiant app
# #'
# #' @param app App to run when the desktop icon is double-clicked ("marketing", "quant", or "base"). Default is "marketing"
# #'
# #' @examples
# #' if (interactive()) {
# #'   if(Sys.info()["sysname"] != "Windows") {
# #'     win_launcher()
# #'     fn <- paste0(Sys.getenv("USERPROFILE") ,"/Desktop/radiant.bat")
# #'     if(!file.exists(fn))
# #'        stop("Windows launcher not created")
# #'     else
# #'       unlink(fn)
# #'   }
# #' }
# #'
# #' @export
# win_launcher <- function(app = c("marketing", "quant", "base")) {
#
#   if(Sys.info()["sysname"] != "Windows")
#     return("This function is for Windows only. For Mac use the mac_launcher() function")
#
#   local_dir <- Sys.getenv("R_LIBS_USER")
#   if(!file.exists(local_dir)) dir.create(local_dir, recursive = TRUE)
#
#   filepath <- normalizePath(paste0(Sys.getenv("USERPROFILE") ,"/Desktop/"), winslash='/')
#   launch_string <- paste0(Sys.which('R'), " -e \"if(!require(radiant)) { options(repos = c(XRAN = 'http://vnijs.github.io/radiant_miniCRAN/')); install.packages('radiant'); }; require(radiant); shiny::runApp(system.file(\'", app[1], "\', package='radiant'), port = 4444, launch.browser = TRUE)\"")
#   cat(launch_string,file=paste0(filepath,"radiant.bat"),sep="\n")
# }
#
# #' Create a launcher for Mac (.command)
# #'
# #' @details On Mac a file named `radiant.command` will be put on the desktop. Double-click the file to launch the specified Radiant app
# #'
# #' @param app App to run when the desktop icon is double-clicked ("marketing", "quant", or "base"). Default is "marketing"
# #'
# #' @examples
# #' if (interactive()) {
# #'   if(Sys.info()["sysname"] != "Darwin") {
# #'     mac_launcher()
# #'     fn <- paste0("/Users/",Sys.getenv("USER"),"/Desktop/radiant.command")
# #'     if(!file.exists(fn))
# #'        stop("Mac launcher not created")
# #'     else
# #'       unlink(fn)
# #'   }
# #' }
# #'
# #' @export
# mac_launcher <- function(app = c("marketing", "quant", "base")) {
#
#   if(Sys.info()["sysname"] != "Darwin")
#     return("This function is for Mac only. For windows use the win_launcher() function")
#
#   local_dir <- Sys.getenv("R_LIBS_USER")
#   if(!file.exists(local_dir)) dir.create(local_dir, recursive = TRUE)
#
#   filename <- paste0("/Users/",Sys.getenv("USER"),"/Desktop/radiant.command")
#   launch_string <- paste0("#!/usr/bin/env Rscript\n if(!require(radiant)) {\n options(repos = c(XRAN = 'http://vnijs.github.io/radiant_miniCRAN/'))\n install.packages('radiant')\n }\n\nrequire(radiant)\nshiny::runApp(system.file(\'", app[1], "\', package='radiant'), port = 4444, launch.browser = TRUE)\n")
#   cat(launch_string,file=filename,sep="\n")
#   Sys.chmod(filename, mode = "0755")
# }
#' Launch VisualToolkit in the default browser
#'
#' @details See \url{http://www.google.com} for documentation and tutorials
#'
#' @examples
#' if (interactive()) {
#'   visualToolkit()
#' }
#' @export
visualToolkit <- function() {
appDir <- system.file("visualToolkit", package = "visualToolkit")
if (appDir == "") {
stop("Could not find example directory. Try re-installing `mypackage`.", call. = FALSE)
}
shiny::runApp(appDir, display.mode = "normal")
}
