(mpg - predict(lm.fit, Auto))[-train]^2
mean((mpg - predict(lm.fit, Auto))[-train]^2)
lm.fit2 <- lm(mpg ~ poly(horsepower, 2), data=Auto, subset=train)
mean((mpg - predict(lm.fit2, Auto))[-train]^2)
lm.fit3 <- lm(mpg ~ poly(horsepower, 3), data=Auto, subset=train)
mean((mpg - predict(lm.fit3, Auto))[-train]^2)
library(boot)
glm.fit = glm(mpg ~ horsepower, data=Auto)
cv.error = cv.glm(Auto, glm.fit)
cv.error$delta
cv.error = rep(0, 5)
for (i in 1:5) {
glm.fit = glm(mpg ~ poly(horsepower, i), data=Auto)
cv.error[i] = cv.glm(Auto, glm.fit)$delta[1]
}
cv.error
set.seed(17)
cv.error.10 = rep(0, 10)
for (i in 10) {
glm.fit = glm(mpg ~ poly(horsepower, i), data=Auto)
cv.error.10[i] = cv.glm(Auto, glm.fit, K=10)$delta[1]
}
cv.error.10
for (i in 1:10) {
glm.fit = glm(mpg ~ poly(horsepower, i), data=Auto)
cv.error.10[i] = cv.glm(Auto, glm.fit, K=10)$delta[1]
}
cv.error.10
head(Portfolio)
?Portfolio
summary(Portfolio)
alpha.fn = function(data, index) {
X = data$X[index]
Y = data$Y[index]
return((var(Y) - cov(X, Y)) / (var(X) + var(Y) - 2 * cov(X, Y)))
}
alpha.fn(Portfolio, 1:1000)
alpha.fn(Portfolio, 1:100)
X = data$X[1:100]
boot(Portfolio, alpha.fn, R=1000)
boot.fn = function(data, index) {
return(coef(lm(mpg ~ horsepower, data=data, subset=index)))
}
head(Auto)
names(Auto)
dim(Auto)
boot.fn(Auto, 1:392)
set.seed(1)
boot.fn(Auto, sample(392, 392, replace=T))
boot.fn(Auto, sample(392, 392, replace=T))
boot(Auto, boot.fn, 1000)
summary(lm(mpg ~ horsepower, data=Auto))$coef
?I
boot.fn = function(data, index) {
return(coef(lm(mpg ~ horsepower + I(horsepower^2), data=data, subset=Index)))
}
set.seed(1)
boot(Auto, boot.fn, 1000)
boot.fn = function(data, index) {
return(coef(lm(mpg ~ horsepower + I(horsepower^2), data=data, subset=index)))
}
set.seed(1)
boot(Auto, boot.fn, 1000)
summary(lm(mpg ~ horsepower + I(horsepower^2), data=data))$coef
summary(lm(mpg ~ horsepower + I(horsepower^2), data=Auto))$coef
install.packages("shiny")
library(shiny)
a <- matrix(1:10, 5, 2)
a
a <- matrix(c(0.338, 0.391, 0.369, 0.313, 0.361, ))
a <- matrix(c(0.338, 0.391, 0.369, 0.313, 0.361, 0.54, 0.45, 0.374, 0.447, 0.5))
a <- matrix(c(0.338, 0.391, 0.369, 0.313, 0.361, 0.54, 0.45, 0.374, 0.447, 0.5), 5, 2)
a
b <- matrix(c(2737.77, 1584.91))
b
a * b
a %*% b
c <- a %*% b
c - 804.63
c <- c - 804.63
c
d <- matrix(c(1400000, 1065000, 295000, 800000, 300000))
d % c
d / c
teamRank = c(1,2,3,3,4,4,4,4,5,5)
r2012 <- c(94, 88, 95, 88, 93, 94, 98, 97, 93, 94)
r2013 <- c(97, 97, 92, 93, 92, 96, 94, 96, 92, 90)
cor(teamRank, r2012)
cor(teamRank, r2013)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot(3)
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
dTable(airquality, sPaginationType = "full_numbers")
airquality
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
ls
a <- 1:30
b <- 5:35
a - b
b - a
head(a)
head(b)
class(a)
setdiff(a, b)
data(mtcars)
head(airquality)
head(airquality)
nrow(airquality)
xcomplete.cases(airquality)
x <- airquality[complete.cases(airquality), ]
nrow(x)
data(airquality)
cor(airquality)
head(airquality)
min(Ozone)
min(airquality$Ozone)
plot(Solar.R ~ Wind, airquality)
head(airquality)
library(ggplot2)
ggplot(airquality) +
geom_point(aes(x = Wind, y = Ozone, fill = Month))
ggplot(airquality) +
geom_point(aes(x = Wind, y = Ozone, color = Month))
ggplot(airquality) +
geom_point(aes(x = Wind, y = Ozone)) +
facet_grid(Month ~ .)
head(airquality)
cor(airquality, na.rm = T)
cor(airquality, rm.na = T)
cor(airquality)
x <- airquality[complete.cases(airquality), ]
x <- cor(airquality)
cor(x)
head(x)
x <- airquality[complete.cases(airquality), ]
head(x)
cor(x)
ggplot(x) +
geom_point(aes(x = Temp, y = Ozone))
ggplot(x) +
geom_point(aes(x = Temp, y = Ozone)) +
facet_grid(Month ~ .)
a <- 1:30
b <- 5:35
setdiff(a, b)
a
b
a - b
setdiff(b, a)
a[a %in% b]
a[!(a %in% b)]
subset(airquality, na = TRUE)
subset(airquality, nm = TRUE)
subset(airquality, complete.cases(airquality))
subset(airquality, !complete.cases(airquality))
g = D(x^2 ~ x)
install.packages('mosaic')
library(mosaic)
g = D(x^2 ~ x)
g
g(2)
D(sin(x) ~ x)
D(cos(x) ~ x)
h <- D(sin(abs(x - 3)) ~ x)
h
h(2)
sin(90)
?since
?sin
waterLM <- lm(y ~ A * B * C)
A <- c(-1, -1, -1, +1)
B <- c(-1, +1, -1, +1)
C <- c(-1, -1, +1, +1)
y <- c(30, 6, 4, 8)
waterLM <- lm(y ~ A * B * C)
summary(waterLM)
x <- c(1, 2, 3, 4)
sd(x)
update.packages()
rm(list = ls())
?aggregate
rm(list = ls())
library(DBI)
rm(list = ls())
getwd()
library(leafletR)
library(rgdal) #for reading/writing geo files
install.packages('rgdal')
install.packages(geos, type="source")
install.packages('geos', type="source")
install.packages('rgdal', type="source")
library(rgdal) #for reading/writing geo files
install.packages('geos', type="source")
install.packages('geos')
library(leaftlet)
library(leaftletR)
library(leafletR)
library(leaftlet)
install.packages('leaflet')
detach('package:leafletR')
if(!require(devtools)) install.packages("devtools")
if(!require(leaflet)) install_github("rstudio/leaflet")
library(leaflet)
if(!require(leaflet)) install_github("rstudio/leaflet")
(m <- leaflet() %>% addTiles())
(m <- leaflet() %>% addTiles())
install_github("rstudio/leaflet")
library(leaflet)
(m <- leaflet() %>% addTiles())
m <- leaflet() %>% addTiles()
m
(m)
img <- readPNG("~/repos/Creating-maps-in-R/figure//shiny_world.png")
m
library(RCurl) # download https data
urlfile <- 'https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data'
x <- getURL(urlfile, ssl.verifypeer = FALSE)
adults <- read.csv(textConnection(x), header=F)
# if the above getURL command fails, try this:
# adults <-read.csv('https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data', header=F)
names(adults)=c('Age','Workclass','FinalWeight','Education','EducationNumber',
'MaritalStatus','Occupation','Relationship','Race',
'Sex','CapitalGain','CapitalLoss','HoursWeek',
'NativeCountry','Income')
adults$Income <- ifelse(adults$Income==' <=50K',0,1)
library(caret)
dmy <- dummyVars(" ~ .", data = adults)
adultsTrsf <- data.frame(predict(dmy, newdata = adults))
## Correlation matrix with p-values. See http://goo.gl/nahmV for documentation of this function
cor.prob <- function (X, dfr = nrow(X) - 2) {
R <- cor(X, use="pairwise.complete.obs")
above <- row(R) < col(R)
r2 <- R[above]^2
Fstat <- r2 * dfr/(1 - r2)
R[above] <- 1 - pf(Fstat, 1, dfr)
R[row(R) == col(R)] <- NA
R
}
## Use this to dump the cor.prob output to a 4 column matrix
## with row/column indices, correlation, and p-value.
## See StackOverflow question: http://goo.gl/fCUcQ
flattenSquareMatrix <- function(m) {
if( (class(m) != "matrix") | (nrow(m) != ncol(m))) stop("Must be a square matrix.")
if(!identical(rownames(m), colnames(m))) stop("Row and column names must be equal.")
ut <- upper.tri(m)
data.frame(i = rownames(m)[row(m)[ut]],
j = rownames(m)[col(m)[ut]],
cor=t(m)[ut],
p=m[ut])
}
x <- cor.prob(adultsTrsf)
head(x)
library(caret)
remove(list=ls9)
remove(list=ls())
library(caret)
remove(list=ls())
names(getModelInfo())
names(getModelInfo())
library(RCurl)
urlfile <-'https://raw.githubusercontent.com/hadley/fueleconomy/master/data-raw/vehicles.csv'
?getURL
x <- getURL(urlfile, ssl.verifypeer = FALSE)
class(x)
head(x)
vehicles <- read.csv(textConnection(x))
head(vehicles)
dim(vehicles)
?repeat
?repeat
remove(list=ls())
titanicDF <- read.csv('http://math.ucdenver.edu/RTutorial/titanic.txt',sep='\t')
head(titanicDF)
titanicDF$Title <- ifelse(grepl('Mr ',titanicDF$Name),'Mr',ifelse(grepl('Mrs ',titanicDF$Name),'Mrs',ifelse(grepl('Miss',titanicDF$Name),'Miss','Nothing')))
titanicDF$Title <- as.factor(titanicDF$Title)
titanicDF$Age[is.na(titanicDF$Age)] <- median(titanicDF$Age, na.rm=T)
titanicDF <- titanicDF[c('PClass', 'Age',    'Sex',   'Title', 'Survived')]
require(caret)
titanicDummy <- dummyVars("~.",data=titanicDF, fullRank=F)
titanicDF <- as.data.frame(predict(titanicDummy,titanicDF))
head(titanicDF)
summary(titanicDF)
df_survived_1 <- subset(titanicDF, Survived==1)
df_survived_0 <- subset(titanicDF, Survived==0)
summary(df_survived_1$Sex.female)
summary(df_survived_0$Sex.female)
class(summary(df_survived_0$Sex.female))
Sex.Female_0 <- (summary(df_survived_0$Sex.female))
Sex.Female_0
class(Sex.Female_0)
Sex.Female_0 <- summary(df_survived_0$Sex.female)
class(Sex.Female_0)
Sex.Female_0
Sex.Female_0 <- c(Sex.Female_0[1:6])
Sex.Female_0
class(Sex.Female_0)
Sex.Female_0 <- as.numeric(summary(df_survived_0$Sex.female))
Sex.Female_0
Sex.Female_0 <- summary(df_survived_0$Sex.female)
Sex.Female_0 <- c(Sex.Female_0[1:6])
Sex.Female_1 <- (summary(df_survived_1$Sex.female))
Sex.Female_1 <- c(Sex.Female_1[1:6])
stats <- data.frame('ind'=c(1:6),
'Sex.Female_1'=Sex.Female_1,
'Sex.Female_0'=Sex.Female_0)
stats
Sex.Female_1
str(Sex.Female_1)
class(Sex.Female_1)
names(Sex.Female_1)
Sex.Female_1 <- summary(df_survived_1$Sex.female)
Sex.Female_1 <- c(Sex.Female_1)
Sex.Female_1
class(Sex.Female_1)
Sex.Female_0 <- c(Sex.Female_0)
stats <- data.frame('ind'=c(1:6),
'Sex.Female_1'=Sex.Female_1,
'Sex.Female_0'=Sex.Female_0)
stats
require(ggplot2)
p <- ggplot(data=stats, aes(ind)) +
geom_line(aes(y = Sex.Female_1, colour = "Sex.Female_1")) +
geom_line(aes(y = Sex.Female_0, colour = "Sex.Female_0")) +
scale_x_discrete(breaks = 1:6,
labels=c("min","1q","median","mean","3q","max"))
p
rm(list = ls())
getwd()
library(shiny)
setwd('/Users/hawooksong/Desktop/shiny_data_explorer')
runApp()
sessionInfo()
mtcars
df <- mtcars
aggBy <- 'cyl'
aggTarget <- 'mpg'
aggMeth <- 'mean'
## select independent/dependent variables
df <- df[, c(aggBy, aggTarget)]
## convert character vector to list of symbols
dots <- lapply(aggBy, as.symbol)
## group data
grp <- dplyr::group_by_(df, .dots=dots)
## perform non-count aggregation by column
agg <- dplyr::summarise_each(grp, funs_(nonCntAggMeth))
nonCntAggMeth <- setdiff(aggMeth, 'count')
## perform non-count aggregation by column
agg <- dplyr::summarise_each(grp, funs_(nonCntAggMeth))
nonCntAggMeth
nonCntAggMeth <- c('n', 'mean')
agg <- dplyr::summarise_each(grp, funs_(nonCntAggMeth))
nonCntAggMeth <- c('sum', 'mean')
agg <- dplyr::summarise_each(grp, funs_(nonCntAggMeth))
agg
nonCntAggMeth <- c('sum', 'mean', 'count')
agg <- dplyr::summarise_each(grp, funs_(nonCntAggMeth))
nonCntAggMeth <- c('sum', 'mean', 'length')
agg <- dplyr::summarise_each(grp, funs_(nonCntAggMeth))
agg
aggBy <- c('cyl', 'am')
aggTarget <- c('mpg', 'hp')
aggMeth <- 'mean'
## group data
grp <- dplyr::group_by_(df, .dots=dots)
nonCntAggMeth <- setdiff(aggMeth, 'count')
dots <- lapply(aggBy, as.symbol)
grp <- dplyr::group_by_(df, .dots=dots)
df <- mtcars
aggBy <- c('cyl', 'am')
aggTarget <- c('mpg', 'hp')
aggMeth <- 'mean'
## aggBy can contain duplicates when x and facet variables are the same
aggBy <- unique(aggBy)
## select independent/dependent variables
df <- df[, c(aggBy, aggTarget)]
## conditional to perform count later
cntInAggMeth <- 'count' %in% aggMeth
nonCntAggMeth <- setdiff(aggMeth, 'count')
## convert character vector to list of symbols
dots <- lapply(aggBy, as.symbol)
## group data
grp <- dplyr::group_by_(df, .dots=dots)
nonCntAggMeth
agg <- dplyr::summarise_each(grp, funs_(nonCntAggMeth))
agg
nonCntAggMeth <- c('sum', 'mean', 'length')
agg <- dplyr::summarise_each(grp, funs_(nonCntAggMeth))
agg
nonCntAggMeth <- c('sum', 'mean', 'max')
agg <- dplyr::summarise_each(grp, funs_(nonCntAggMeth))
agg
nonCntAggMeth <- c('sum', 'mean', 'median')
agg
agg <- dplyr::summarise_each(grp, funs_(nonCntAggMeth))
nonCntAggMeth <- c('sum', 'mean', 'med')
agg <- dplyr::summarise_each(grp, funs_(nonCntAggMeth))
?summarise_impl
?summarise_each
summarise_each(grp, median)
summarise_each(grp, 'max')
summarise_each(grp, 'median')
grp
summarise_each(grp, ~ median)
summarise_each(grp, ~ max)
summarise_each(grp, ~ min)
nonCntAggMeth
nonCntAggMeth <- c('sum', 'mean', 'median')
agg <- dplyr::summarise_each(grp, ~ funs_(nonCntAggMeth))
agg <- dplyr::summarise_each(grp, funs_(nonCntAggMeth))
nonCntAggMeth
summarise_each(grp, ~ median)
summarise_each(grp, ~ max)
summarise_each(grp, ~ min)
?median
medAgg <- dplyr::summarise_each(grp, ~ median)
print(medAgg)
medAgg <- dplyr::summarise_each(grp, med = ~ median)
length(aggBy)
ncol(aggBy)
ncol(medAgg)
colnames(medAgg)
colnames(medAgg)[nAggCol:ncol]
nAggCol <- length(aggBy)
ncol <- ncol(medAgg)
colnames(medAgg)[nAggCol:ncol]
colnames(medAgg)[2:4]
colnames(medAgg)[3:4]
colnames(medAgg)[nMedAggCol+1:ncol]
nMedAggCol <- length(aggBy)
ncol <- ncol(medAgg)
colnames(medAgg)[nMedAggCol+1:ncol]
nMedAggCol
ncol
colnames(medAgg)[(nMedAggCol+1):ncol]
medAgg
colnames(medAgg)[(nMedAggCol+1):ncol]
agg
paste0(colnames(medAgg)[(nMedAggCol+1):ncol], 'median')
paste0(colnames(medAgg)[(nMedAggCol+1):ncol], '_median')
colnames(medAgg) <- c(aggBy, paste0(colnames(medAgg)[(nMedAggCol+1):ncol], '_median'))
medAgg
medAgg <- dplyr::summarise_each(grp, ~ median)
nMedAggCol <- length(aggBy)
ncol <- ncol(medAgg)
colnames(medAgg) <- c(aggBy, paste0(colnames(medAgg)[(nMedAggCol+1):ncol], '_median'))
medAgg
agg <- merge(agg, medAgg, by=aggBy)
print(medAgg)
rm(list = ls())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Desktop/shiny_data_explorer/reactives/plot.R')
runApp()
source('~/Desktop/shiny_data_explorer/reactives/plot.R')
runAPp()
runApp()
runApp()
c('hi', NULL)
c
runApp()
a = c('hi', NULL, NULL)
length(a)
a
rm(a)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(diamonds)
?is.complete
?is.completed
tapply(diamonds, function(x) {
sum(is.na(x))
})
sapply(diamonds, function(x) {
sum(is.na(x))
})
sapply(diamonds, function(x) {
sum(!is.na(x))
})
table(is.na(diamonds$carat))
runApp()
source('~/Desktop/shiny_data_explorer/reactives/plot.R')
source('~/Desktop/shiny_data_explorer/reactives/plot.R')
runApp()
runApp()
runApp()
source('~/Desktop/shiny_data_explorer/reactives/plot.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- diamonds
str(df)
